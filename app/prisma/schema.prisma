generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  reports       Report[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  reportId  String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model Report {
  id                 String                        @id @default(cuid())
  fileName           String
  fileSize           Int
  fileType           String
  perspective        String
  status             String                        @default("processing")
  overallRiskScore   Float?
  overallRiskLevel   String?
  summary            String?
  recommendations    String?
  userId             String?
  anonymousEmail     String?
  createdAt          DateTime                      @default(now())
  updatedAt          DateTime                      @updatedAt
  emailVerifications EmailVerification[]
  complianceAnalysis RegulatoryComplianceAnalysis?
  user               User?                         @relation(fields: [userId], references: [id])
  assessments        RiskAssessment[]

  @@index([userId])
  @@index([anonymousEmail])
  @@index([createdAt])
}

model RiskAssessment {
  id                    String   @id @default(cuid())
  reportId              String
  categoryId            String
  categoryName          String
  subcategoryId         String
  subcategoryName       String
  riskDescription       String
  likelihoodScore       Int
  impactScore           Int
  riskScore             Int
  riskLevel             String
  keyFindings           String[]
  mitigationStrategies  String[]
  complianceEvidence    String[]
  regulatoryMapping     String[]
  regulatoryReferences  String[] @default([])
  industryBestPractices String[] @default([])
  scoringTransparency   Json?
  documentEvidence      Json?
  createdAt             DateTime @default(now())
  report                Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([riskLevel])
  @@index([categoryId])
}

model RegulatoryComplianceAnalysis {
  id                                                 String   @id @default(cuid())
  reportId                                           String   @unique
  riskSpecificRequiredEvidence                       String[]
  riskSpecificRegulatoryReferences                   String[]
  riskSpecificIndustryBestPractices                  String[]
  aiGovernanceRequiredEvidence                       String[]
  aiGovernanceRegulatoryReferences                   String[]
  aiGovernanceIndustryBestPractices                  String[]
  dataProtectionRequiredEvidence                     String[]
  dataProtectionRegulatoryReferences                 String[]
  dataProtectionIndustryBestPractices                String[]
  incidentReportingRequiredEvidence                  String[]
  incidentReportingRegulatoryReferences              String[]
  incidentReportingIndustryBestPractices             String[]
  dpiaRequiredEvidence                               String[]
  dpiaRegulatoryReferences                           String[]
  dpiaIndustryBestPractices                          String[]
  thirdPartyRiskRequiredEvidence                     String[]
  thirdPartyRiskRegulatoryReferences                 String[]
  thirdPartyRiskIndustryBestPractices                String[]
  aiQualityManagementRequiredEvidence                String[]
  aiQualityManagementRegulatoryReferences            String[]
  aiQualityManagementIndustryBestPractices           String[]
  cipmPrivacyImpactAssessmentRequiredEvidence        String[]
  cipmPrivacyImpactAssessmentRegulatoryReferences    String[]
  cipmPrivacyImpactAssessmentIndustryBestPractices   String[]
  cipmPrivacyControlsRequiredEvidence                String[]
  cipmPrivacyControlsRegulatoryReferences            String[]
  cipmPrivacyControlsIndustryBestPractices           String[]
  cipmPrivacyProgramMaintenanceRequiredEvidence      String[]
  cipmPrivacyProgramMaintenanceRegulatoryReferences  String[]
  cipmPrivacyProgramMaintenanceIndustryBestPractices String[]
  cipmPrivacyIncidentResponseRequiredEvidence        String[]
  cipmPrivacyIncidentResponseRegulatoryReferences    String[]
  cipmPrivacyIncidentResponseIndustryBestPractices   String[]
  cipmPrivacyByDesignRequiredEvidence                String[]
  cipmPrivacyByDesignRegulatoryReferences            String[]
  cipmPrivacyByDesignIndustryBestPractices           String[]
  cipmAutomatedDecisionMakingRequiredEvidence        String[]
  cipmAutomatedDecisionMakingRegulatoryReferences    String[]
  cipmAutomatedDecisionMakingIndustryBestPractices   String[]
  createdAt                                          DateTime @default(now())
  report                                             Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
}
